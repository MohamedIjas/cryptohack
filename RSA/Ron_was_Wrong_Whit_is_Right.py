from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP

# Public exponent (commonly used in RSA)
e = 65537  

# RSA modulus: n = p * q, product of two large primes
n = 0x

# Prime factors of n
p = 919031168254299...  # Truncated for readability
q = 991430390905926...  # Truncated for readability

# Ciphertext: the encrypted message
c = 0xc62d91677825632c...  # Truncated for readability

# Private key exponent: d = e^(-1) mod ((p-1)*(q-1))
d = pow(e, -1, (p-1)*(q-1))  # Modular inverse calculation

# Construct RSA key using the calculated values
key = RSA.construct((n, e, d))  

# Initialize decryption using PKCS1_OAEP padding
cipher = PKCS1_OAEP.new(key)

# Decrypt the ciphertext, convert it to a string, and print
# Hex conversion: hex(c)[2:] removes the "0x" prefix, and `bytes.fromhex` creates bytes from the hex string
print(cipher.decrypt(bytes.fromhex(hex(c)[2:])).decode())
